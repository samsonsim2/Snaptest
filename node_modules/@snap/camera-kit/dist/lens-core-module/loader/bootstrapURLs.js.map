{"version":3,"file":"bootstrapURLs.js","sourceRoot":"","sources":["../../../src/lens-core-module/loader/bootstrapURLs.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,YAAY,EAAE,uBAAuB,EAAE,MAAM,qCAAqC,CAAC;AAC5F,OAAO,EAAE,eAAe,EAAE,MAAM,6BAA6B,CAAC;AAM9D,MAAM,qCAAqC,GAAG;IAC1C,CAAC,YAAY,CAAC,OAAO,CAAC,EAAE,SAAS;IACjC,CAAC,YAAY,CAAC,iBAAiB,CAAC,EAAE,SAAS;IAC3C,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,cAAc;IACnC,CAAC,YAAY,CAAC,iBAAiB,GAAG,YAAY,CAAC,IAAI,CAAC,EAAE,cAAc;CACvE,CAAC;AAEF,MAAM,UAAU,GAAG,CAAC,wBAAwB,EAAE,0BAA0B,CAAC,CAAC;AAa1E,MAAM,UAAgB,wBAAwB,CAAC,gBAAyB;;QAEpE,MAAM,QAAQ,GAAG,gBAAgB,aAAhB,gBAAgB,uBAAhB,gBAAgB,CAAE,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;QAEzD,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,uBAAuB,EAAE,CAAC;QACjD,IAAI,CAAC,IAAI,CAAC,SAAS;YAAE,MAAM,IAAI,CAAC,KAAK,CAAC;QAEtC,MAAM,EAAE,QAAQ,EAAE,GAAG,eAAe,EAAE,CAAC;QACvC,MAAM,MAAM,GAAG,qCAAqC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QACxE,IAAI,CAAC,MAAM;YACP,MAAM,IAAI,KAAK,CACX,6EAA6E;gBACzE,GAAG,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,CAAC,qCAAqC,CAC5E,CAAC;QACN,MAAM,OAAO,GAAG,QAAQ,CAAC,OAAO,CAAC;QACjC,MAAM,WAAW,GAAG,QAAQ,CAAC,WAAW,CAAC;QACzC,OAAO,UAAU,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE;YAC5B,IAAI,QAAQ;gBAAE,OAAO,GAAG,QAAQ,IAAI,KAAK,EAAE,CAAC;YAC5C,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,GAAG,IAAI,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;YAC/D,OAAO,GAAG,MAAM,GAAG,QAAQ,IAAI,OAAO,IAAI,WAAW,IAAI,MAAM,IAAI,KAAK,GAAG,MAAM,EAAE,CAAC;QACxF,CAAC,CAAC,CAAC;IACP,CAAC;CAAA","sourcesContent":["import { WasmFeatures, getPlatformCapabilities } from \"../../platform/platformCapabilities\";\nimport { getPlatformInfo } from \"../../platform/platformInfo\";\n\n/**\n * Map various combinations of WebAssembly capabilities to the corresponding LensCore build flavours which make use\n * of them.\n */\nconst wasmCapabilitiesToLensCoreBuildFlavor = {\n    [WasmFeatures.Default]: \"release\",\n    [WasmFeatures.ExceptionHandling]: \"rel-neh\",\n    [WasmFeatures.SIMD]: \"release-simd\",\n    [WasmFeatures.ExceptionHandling | WasmFeatures.SIMD]: \"rel-simd-neh\",\n};\n\nconst wasmAssets = [\"LensCoreWebAssembly.js\", \"LensCoreWebAssembly.wasm\"];\n\n/**\n * Returns a list of URLs for resources which will be fetched during {@link bootstrapCameraKit}.\n *\n * When CameraKit is used on a website, these URLs must be reachable in order for CameraKit to be successfully\n * bootstrapped.\n *\n * @param endpointOverride Optional endpoint override to load the assets from.\n * @returns An array of asset URLs.\n *\n * @category Bootstrapping and Configuration\n */\nexport async function getRequiredBootstrapURLs(endpointOverride?: string): Promise<string[]> {\n    // If we have an endpoint override, remove trailing `/` so we can construct a valid URL.\n    const endpoint = endpointOverride?.replace(/[\\/]+$/, \"\");\n\n    const { wasm } = await getPlatformCapabilities();\n    if (!wasm.supported) throw wasm.error;\n\n    const { lensCore } = getPlatformInfo();\n    const flavor = wasmCapabilitiesToLensCoreBuildFlavor[wasm.wasmFeatures];\n    if (!flavor)\n        throw new Error(\n            `Could not determine a LensCore build flavor corresponding to the bitstring ` +\n                `${wasm.wasmFeatures.toString(2)}. CameraKit cannot be bootstrapped.`\n        );\n    const version = lensCore.version;\n    const buildNumber = lensCore.buildNumber;\n    return wasmAssets.map((asset) => {\n        if (endpoint) return `${endpoint}/${asset}`;\n        const { origin, pathname, search } = new URL(lensCore.baseUrl);\n        return `${origin}${pathname}/${version}/${buildNumber}/${flavor}/${asset}${search}`;\n    });\n}\n"]}