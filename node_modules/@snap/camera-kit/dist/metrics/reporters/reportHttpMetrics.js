import { assertUnreachable } from "../../common/assertions";
import { Injectable } from "../../dependency-injection/Injectable";
import { scan } from "../../events/scan";
import { COF_REQUEST_TYPE } from "../../remote-configuration/cofHandler";
import { requestStateEventTargetFactory } from "../../handlers/requestStateEmittingHandler";
import { getPlatformInfo } from "../../platform/platformInfo";
import { metricsClientFactory } from "../../clients/metricsClient";
import { Count } from "../operational/Count";
import { Histogram } from "../operational/Histogram";
import { isLensOrAssetRequest } from "./reportLensAndAssetDownload";
const getAdditionalDimensions = (dimensions) => {
    switch (dimensions.requestType) {
        case "lens_content":
        case "asset":
            return [];
        case COF_REQUEST_TYPE:
            return [["delta", dimensions.delta]];
        default:
            assertUnreachable(dimensions);
    }
};
const getContentType = (dimensions) => {
    switch (dimensions.requestType) {
        case "lens_content":
            return "lens_content";
        case "asset":
            return dimensions.assetType;
        case COF_REQUEST_TYPE:
            return COF_REQUEST_TYPE;
        default:
            assertUnreachable(dimensions);
    }
};
const getSizeKb = (event) => {
    switch (event.type) {
        case "started":
        case "errored":
            return 0;
        case "completed":
            return event.detail.sizeByte / 1024;
        default:
            assertUnreachable(event);
    }
};
const getStatus = (event) => {
    switch (event.type) {
        case "started":
        case "errored":
            return "0";
        case "completed":
            return event.detail.status.toString();
        default:
            assertUnreachable(event);
    }
};
export const isRelevantRequest = (value) => {
    return isLensOrAssetRequest(value) || value["requestType"] === COF_REQUEST_TYPE;
};
export const reportHttpMetrics = Injectable("reportHttpMetrics", [metricsClientFactory.token, requestStateEventTargetFactory.token], (metrics, requestStateEventTarget) => {
    scan({ name: "inProgress", inProgress: new Map() })(requestStateEventTarget, ["started", "completed", "errored"], (state, event) => {
        var _a;
        const { inProgress } = state;
        const { dimensions, requestId } = event.detail;
        if (!isRelevantRequest(dimensions))
            return state;
        switch (event.type) {
            case "started":
                const timer = event.detail.timer;
                inProgress.set(requestId, { timer });
                return { name: "inProgress", inProgress };
            case "completed":
            case "errored":
                const completedRequest = inProgress.get(requestId);
                if (!completedRequest)
                    return state;
                inProgress.delete(requestId);
                const downloadSizeKb = getSizeKb(event);
                const status = getStatus(event);
                const operationalDimensions = {
                    content_type: getContentType(dimensions),
                    network_type: (_a = getPlatformInfo().connectionType) !== null && _a !== void 0 ? _a : "unknown",
                    status,
                };
                for (const [key, value] of getAdditionalDimensions(dimensions)) {
                    operationalDimensions[key] = value;
                }
                completedRequest.timer.measure(operationalDimensions);
                return {
                    name: "completed",
                    inProgress: state.inProgress,
                    dimensions: operationalDimensions,
                    downloadSizeKb,
                    timer: completedRequest.timer,
                };
            default:
                assertUnreachable(event);
        }
    }).addEventListener("state", ({ detail: state }) => {
        if (state.name !== "completed")
            return;
        const { dimensions, timer, downloadSizeKb } = state;
        metrics.setOperationalMetrics(Count.count("download_finished", 1, dimensions));
        metrics.setOperationalMetrics(Histogram.level("download_size_kb", downloadSizeKb, dimensions));
        metrics.setOperationalMetrics(timer);
    });
});
//# sourceMappingURL=reportHttpMetrics.js.map