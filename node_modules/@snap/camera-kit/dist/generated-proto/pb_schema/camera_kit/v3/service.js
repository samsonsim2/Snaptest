import Long from "long";
import _m0 from "protobufjs/minimal";
import { RankingData } from "./ranking";
import { Lens } from "./lens";
import { LegalPrompt } from "./legal_prompt";
import { OperationalMetricsBundle } from "./operational_metrics";
import { Any } from "../../google/protobuf/any";
import { ExtensionEventBase } from "./business_events";
export const protobufPackage = "com.snap.camerakit.v3";
function createBaseGetGroupRequest() {
    return { id: "", rankingData: undefined };
}
export const GetGroupRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.rankingData !== undefined) {
            RankingData.encode(message.rankingData, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetGroupRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.string();
                    break;
                case 2:
                    message.rankingData = RankingData.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetGroupRequest();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.rankingData =
            object.rankingData !== undefined && object.rankingData !== null
                ? RankingData.fromPartial(object.rankingData)
                : undefined;
        return message;
    },
};
function createBaseGetGroupResponse() {
    return { id: "", lenses: [] };
}
export const GetGroupResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        for (const v of message.lenses) {
            Lens.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetGroupResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.string();
                    break;
                case 2:
                    message.lenses.push(Lens.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseGetGroupResponse();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.lenses = ((_b = object.lenses) === null || _b === void 0 ? void 0 : _b.map((e) => Lens.fromPartial(e))) || [];
        return message;
    },
};
function createBaseGetGroupLensRequest() {
    return { lensId: "", groupId: "" };
}
export const GetGroupLensRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.lensId !== "") {
            writer.uint32(10).string(message.lensId);
        }
        if (message.groupId !== "") {
            writer.uint32(18).string(message.groupId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetGroupLensRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.lensId = reader.string();
                    break;
                case 2:
                    message.groupId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseGetGroupLensRequest();
        message.lensId = (_a = object.lensId) !== null && _a !== void 0 ? _a : "";
        message.groupId = (_b = object.groupId) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseGetGroupLensResponse() {
    return { lens: undefined, groupId: "" };
}
export const GetGroupLensResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.lens !== undefined) {
            Lens.encode(message.lens, writer.uint32(10).fork()).ldelim();
        }
        if (message.groupId !== "") {
            writer.uint32(18).string(message.groupId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetGroupLensResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.lens = Lens.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.groupId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetGroupLensResponse();
        message.lens = object.lens !== undefined && object.lens !== null ? Lens.fromPartial(object.lens) : undefined;
        message.groupId = (_a = object.groupId) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseBatchGetGroupLensRequest() {
    return { getRequests: [] };
}
export const BatchGetGroupLensRequest = {
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.getRequests) {
            GetGroupLensRequest.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBatchGetGroupLensRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.getRequests.push(GetGroupLensRequest.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseBatchGetGroupLensRequest();
        message.getRequests = ((_a = object.getRequests) === null || _a === void 0 ? void 0 : _a.map((e) => GetGroupLensRequest.fromPartial(e))) || [];
        return message;
    },
};
function createBaseBatchGetGroupLensResponse() {
    return { getResponses: [] };
}
export const BatchGetGroupLensResponse = {
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.getResponses) {
            GetGroupLensResponse.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBatchGetGroupLensResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.getResponses.push(GetGroupLensResponse.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseBatchGetGroupLensResponse();
        message.getResponses = ((_a = object.getResponses) === null || _a === void 0 ? void 0 : _a.map((e) => GetGroupLensResponse.fromPartial(e))) || [];
        return message;
    },
};
function createBaseGetPlaceholderConfigRequest() {
    return {};
}
export const GetPlaceholderConfigRequest = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetPlaceholderConfigRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(_) {
        const message = createBaseGetPlaceholderConfigRequest();
        return message;
    },
};
function createBaseGetPlaceholderConfigResponse() {
    return { configs: {} };
}
export const GetPlaceholderConfigResponse = {
    encode(message, writer = _m0.Writer.create()) {
        Object.entries(message.configs).forEach(([key, value]) => {
            GetPlaceholderConfigResponse_ConfigsEntry.encode({ key: key, value }, writer.uint32(10).fork()).ldelim();
        });
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetPlaceholderConfigResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    const entry1 = GetPlaceholderConfigResponse_ConfigsEntry.decode(reader, reader.uint32());
                    if (entry1.value !== undefined) {
                        message.configs[entry1.key] = entry1.value;
                    }
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetPlaceholderConfigResponse();
        message.configs = Object.entries((_a = object.configs) !== null && _a !== void 0 ? _a : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = String(value);
            }
            return acc;
        }, {});
        return message;
    },
};
function createBaseGetPlaceholderConfigResponse_ConfigsEntry() {
    return { key: "", value: "" };
}
export const GetPlaceholderConfigResponse_ConfigsEntry = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetPlaceholderConfigResponse_ConfigsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseGetPlaceholderConfigResponse_ConfigsEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseGetInitializationConfigRequest() {
    return {};
}
export const GetInitializationConfigRequest = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetInitializationConfigRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(_) {
        const message = createBaseGetInitializationConfigRequest();
        return message;
    },
};
function createBaseGetInitializationConfigResponse() {
    return {
        appVendorUuidOptIn: false,
        watermarkEnabled: false,
        childrenProtectionActRestricted: false,
        legalPrompt: undefined,
    };
}
export const GetInitializationConfigResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.appVendorUuidOptIn === true) {
            writer.uint32(8).bool(message.appVendorUuidOptIn);
        }
        if (message.watermarkEnabled === true) {
            writer.uint32(16).bool(message.watermarkEnabled);
        }
        if (message.childrenProtectionActRestricted === true) {
            writer.uint32(24).bool(message.childrenProtectionActRestricted);
        }
        if (message.legalPrompt !== undefined) {
            LegalPrompt.encode(message.legalPrompt, writer.uint32(34).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetInitializationConfigResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.appVendorUuidOptIn = reader.bool();
                    break;
                case 2:
                    message.watermarkEnabled = reader.bool();
                    break;
                case 3:
                    message.childrenProtectionActRestricted = reader.bool();
                    break;
                case 4:
                    message.legalPrompt = LegalPrompt.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseGetInitializationConfigResponse();
        message.appVendorUuidOptIn = (_a = object.appVendorUuidOptIn) !== null && _a !== void 0 ? _a : false;
        message.watermarkEnabled = (_b = object.watermarkEnabled) !== null && _b !== void 0 ? _b : false;
        message.childrenProtectionActRestricted = (_c = object.childrenProtectionActRestricted) !== null && _c !== void 0 ? _c : false;
        message.legalPrompt =
            object.legalPrompt !== undefined && object.legalPrompt !== null
                ? LegalPrompt.fromPartial(object.legalPrompt)
                : undefined;
        return message;
    },
};
function createBaseSetOperationalMetricsRequest() {
    return { metrics: undefined };
}
export const SetOperationalMetricsRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.metrics !== undefined) {
            OperationalMetricsBundle.encode(message.metrics, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetOperationalMetricsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.metrics = OperationalMetricsBundle.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseSetOperationalMetricsRequest();
        message.metrics =
            object.metrics !== undefined && object.metrics !== null
                ? OperationalMetricsBundle.fromPartial(object.metrics)
                : undefined;
        return message;
    },
};
function createBaseSetOperationalMetricsResponse() {
    return {};
}
export const SetOperationalMetricsResponse = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetOperationalMetricsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(_) {
        const message = createBaseSetOperationalMetricsResponse();
        return message;
    },
};
function createBaseSetBusinessEventsRequest() {
    return { batchEvents: undefined };
}
export const SetBusinessEventsRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.batchEvents !== undefined) {
            Any.encode(message.batchEvents, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetBusinessEventsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.batchEvents = Any.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseSetBusinessEventsRequest();
        message.batchEvents =
            object.batchEvents !== undefined && object.batchEvents !== null ? Any.fromPartial(object.batchEvents) : undefined;
        return message;
    },
};
function createBaseSetBusinessEventsResponse() {
    return {};
}
export const SetBusinessEventsResponse = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetBusinessEventsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(_) {
        const message = createBaseSetBusinessEventsResponse();
        return message;
    },
};
function createBaseSetExtensionBusinessEventsRequest() {
    return { events: [], extensionEventBase: undefined };
}
export const SetExtensionBusinessEventsRequest = {
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.events) {
            Any.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.extensionEventBase !== undefined) {
            ExtensionEventBase.encode(message.extensionEventBase, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetExtensionBusinessEventsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.events.push(Any.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.extensionEventBase = ExtensionEventBase.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseSetExtensionBusinessEventsRequest();
        message.events = ((_a = object.events) === null || _a === void 0 ? void 0 : _a.map((e) => Any.fromPartial(e))) || [];
        message.extensionEventBase =
            object.extensionEventBase !== undefined && object.extensionEventBase !== null
                ? ExtensionEventBase.fromPartial(object.extensionEventBase)
                : undefined;
        return message;
    },
};
function createBaseSetExtensionBusinessEventsResponse() {
    return {};
}
export const SetExtensionBusinessEventsResponse = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetExtensionBusinessEventsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(_) {
        const message = createBaseSetExtensionBusinessEventsResponse();
        return message;
    },
};
export const LensesDefinition = {
    name: "Lenses",
    fullName: "com.snap.camerakit.v3.Lenses",
    methods: {
        getGroup: {
            name: "GetGroup",
            requestType: GetGroupRequest,
            requestStream: false,
            responseType: GetGroupResponse,
            responseStream: false,
            options: {
                idempotencyLevel: "NO_SIDE_EFFECTS",
            },
        },
        getGroupLens: {
            name: "GetGroupLens",
            requestType: GetGroupLensRequest,
            requestStream: false,
            responseType: GetGroupLensResponse,
            responseStream: false,
            options: {
                idempotencyLevel: "NO_SIDE_EFFECTS",
            },
        },
        batchGetGroupLens: {
            name: "BatchGetGroupLens",
            requestType: BatchGetGroupLensRequest,
            requestStream: false,
            responseType: BatchGetGroupLensResponse,
            responseStream: false,
            options: {
                idempotencyLevel: "NO_SIDE_EFFECTS",
            },
        },
        getPlaceholderConfig: {
            name: "GetPlaceholderConfig",
            requestType: GetPlaceholderConfigRequest,
            requestStream: false,
            responseType: GetPlaceholderConfigResponse,
            responseStream: false,
            options: {
                idempotencyLevel: "NO_SIDE_EFFECTS",
            },
        },
    },
};
export const MetricsDefinition = {
    name: "Metrics",
    fullName: "com.snap.camerakit.v3.Metrics",
    methods: {
        setOperationalMetrics: {
            name: "SetOperationalMetrics",
            requestType: SetOperationalMetricsRequest,
            requestStream: false,
            responseType: SetOperationalMetricsResponse,
            responseStream: false,
            options: {},
        },
        setBusinessEvents: {
            name: "SetBusinessEvents",
            requestType: SetBusinessEventsRequest,
            requestStream: false,
            responseType: SetBusinessEventsResponse,
            responseStream: false,
            options: {},
        },
        setExtensionBusinessEvents: {
            name: "SetExtensionBusinessEvents",
            requestType: SetExtensionBusinessEventsRequest,
            requestStream: false,
            responseType: SetExtensionBusinessEventsResponse,
            responseStream: false,
            options: {},
        },
        getInitializationConfig: {
            name: "GetInitializationConfig",
            requestType: GetInitializationConfigRequest,
            requestStream: false,
            responseType: GetInitializationConfigResponse,
            responseStream: false,
            options: {
                idempotencyLevel: "NO_SIDE_EFFECTS",
            },
        },
    },
};
if (_m0.util.Long !== Long) {
    _m0.util.Long = Long;
    _m0.configure();
}
//# sourceMappingURL=service.js.map