import Long from "long";
import _m0 from "protobufjs/minimal";
export const protobufPackage = "com.snap.camerakit.v3";
export var CameraKitFlavor;
(function (CameraKitFlavor) {
    CameraKitFlavor[CameraKitFlavor["CAMERA_KIT_FLAVOR_UNSET"] = 0] = "CAMERA_KIT_FLAVOR_UNSET";
    CameraKitFlavor[CameraKitFlavor["CAMERA_KIT_FLAVOR_DEBUG"] = 1] = "CAMERA_KIT_FLAVOR_DEBUG";
    CameraKitFlavor[CameraKitFlavor["CAMERA_KIT_FLAVOR_RELEASE"] = 2] = "CAMERA_KIT_FLAVOR_RELEASE";
    CameraKitFlavor[CameraKitFlavor["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(CameraKitFlavor || (CameraKitFlavor = {}));
export var CameraKitConnectivityType;
(function (CameraKitConnectivityType) {
    CameraKitConnectivityType[CameraKitConnectivityType["CAMERA_KIT_CONNECTIVITY_TYPE_UNSET"] = 0] = "CAMERA_KIT_CONNECTIVITY_TYPE_UNSET";
    CameraKitConnectivityType[CameraKitConnectivityType["CAMERA_KIT_CONNECTIVITY_TYPE_WIFI"] = 1] = "CAMERA_KIT_CONNECTIVITY_TYPE_WIFI";
    CameraKitConnectivityType[CameraKitConnectivityType["CAMERA_KIT_CONNECTIVITY_TYPE_MOBILE"] = 2] = "CAMERA_KIT_CONNECTIVITY_TYPE_MOBILE";
    CameraKitConnectivityType[CameraKitConnectivityType["CAMERA_KIT_CONNECTIVITY_TYPE_UNREACHABLE"] = 3] = "CAMERA_KIT_CONNECTIVITY_TYPE_UNREACHABLE";
    CameraKitConnectivityType[CameraKitConnectivityType["CAMERA_KIT_CONNECTIVITY_TYPE_BLUETOOTH"] = 4] = "CAMERA_KIT_CONNECTIVITY_TYPE_BLUETOOTH";
    CameraKitConnectivityType[CameraKitConnectivityType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(CameraKitConnectivityType || (CameraKitConnectivityType = {}));
export var CameraKitEnvironment;
(function (CameraKitEnvironment) {
    CameraKitEnvironment[CameraKitEnvironment["CAMERA_KIT_ENVIRONMENT_UNSET"] = 0] = "CAMERA_KIT_ENVIRONMENT_UNSET";
    CameraKitEnvironment[CameraKitEnvironment["CAMERA_KIT_ENVIRONMENT_STAGING"] = 1] = "CAMERA_KIT_ENVIRONMENT_STAGING";
    CameraKitEnvironment[CameraKitEnvironment["CAMERA_KIT_ENVIRONMENT_PRODUCTION"] = 2] = "CAMERA_KIT_ENVIRONMENT_PRODUCTION";
    CameraKitEnvironment[CameraKitEnvironment["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(CameraKitEnvironment || (CameraKitEnvironment = {}));
function createBaseExtensionEventBase() {
    return {
        extensionName: "",
        extensionVersion: "",
        deviceCluster: "0",
        cameraKitVersion: "",
        lensCoreVersion: "",
        deviceModel: "",
        cameraKitFlavor: 0,
        appId: "",
        deviceConnectivity: 0,
        sessionId: "",
        cameraKitEnvironment: 0,
    };
}
export const ExtensionEventBase = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.extensionName !== "") {
            writer.uint32(10).string(message.extensionName);
        }
        if (message.extensionVersion !== "") {
            writer.uint32(18).string(message.extensionVersion);
        }
        if (message.deviceCluster !== "0") {
            writer.uint32(24).int64(message.deviceCluster);
        }
        if (message.cameraKitVersion !== "") {
            writer.uint32(34).string(message.cameraKitVersion);
        }
        if (message.lensCoreVersion !== "") {
            writer.uint32(42).string(message.lensCoreVersion);
        }
        if (message.deviceModel !== "") {
            writer.uint32(50).string(message.deviceModel);
        }
        if (message.cameraKitFlavor !== 0) {
            writer.uint32(56).int32(message.cameraKitFlavor);
        }
        if (message.appId !== "") {
            writer.uint32(66).string(message.appId);
        }
        if (message.deviceConnectivity !== 0) {
            writer.uint32(72).int32(message.deviceConnectivity);
        }
        if (message.sessionId !== "") {
            writer.uint32(82).string(message.sessionId);
        }
        if (message.cameraKitEnvironment !== 0) {
            writer.uint32(88).int32(message.cameraKitEnvironment);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseExtensionEventBase();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.extensionName = reader.string();
                    break;
                case 2:
                    message.extensionVersion = reader.string();
                    break;
                case 3:
                    message.deviceCluster = longToString(reader.int64());
                    break;
                case 4:
                    message.cameraKitVersion = reader.string();
                    break;
                case 5:
                    message.lensCoreVersion = reader.string();
                    break;
                case 6:
                    message.deviceModel = reader.string();
                    break;
                case 7:
                    message.cameraKitFlavor = reader.int32();
                    break;
                case 8:
                    message.appId = reader.string();
                    break;
                case 9:
                    message.deviceConnectivity = reader.int32();
                    break;
                case 10:
                    message.sessionId = reader.string();
                    break;
                case 11:
                    message.cameraKitEnvironment = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
        const message = createBaseExtensionEventBase();
        message.extensionName = (_a = object.extensionName) !== null && _a !== void 0 ? _a : "";
        message.extensionVersion = (_b = object.extensionVersion) !== null && _b !== void 0 ? _b : "";
        message.deviceCluster = (_c = object.deviceCluster) !== null && _c !== void 0 ? _c : "0";
        message.cameraKitVersion = (_d = object.cameraKitVersion) !== null && _d !== void 0 ? _d : "";
        message.lensCoreVersion = (_e = object.lensCoreVersion) !== null && _e !== void 0 ? _e : "";
        message.deviceModel = (_f = object.deviceModel) !== null && _f !== void 0 ? _f : "";
        message.cameraKitFlavor = (_g = object.cameraKitFlavor) !== null && _g !== void 0 ? _g : 0;
        message.appId = (_h = object.appId) !== null && _h !== void 0 ? _h : "";
        message.deviceConnectivity = (_j = object.deviceConnectivity) !== null && _j !== void 0 ? _j : 0;
        message.sessionId = (_k = object.sessionId) !== null && _k !== void 0 ? _k : "";
        message.cameraKitEnvironment = (_l = object.cameraKitEnvironment) !== null && _l !== void 0 ? _l : 0;
        return message;
    },
};
function longToString(long) {
    return long.toString();
}
if (_m0.util.Long !== Long) {
    _m0.util.Long = Long;
    _m0.configure();
}
//# sourceMappingURL=business_events.js.map