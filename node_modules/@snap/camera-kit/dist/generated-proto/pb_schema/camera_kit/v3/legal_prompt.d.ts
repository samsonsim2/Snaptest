import _m0 from "protobufjs/minimal";
export declare const protobufPackage = "com.snap.camerakit.v3";
export interface LegalPrompt {
    documents: LegalDocument[];
    disabled: boolean;
}
export interface LegalDocument {
    type: LegalDocument_Type;
    webUrl: string;
    version: string;
    timestamp: Date | undefined;
}
export declare enum LegalDocument_Type {
    UNSET = 0,
    TERMS_OF_SERVICE = 1,
    PRIVACY_POLICY = 2,
    LEARN_MORE = 3,
    UNRECOGNIZED = -1
}
export declare const LegalPrompt: {
    encode(message: LegalPrompt, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): LegalPrompt;
    fromPartial<I extends {
        documents?: {
            type?: LegalDocument_Type | undefined;
            webUrl?: string | undefined;
            version?: string | undefined;
            timestamp?: Date | undefined;
        }[] | undefined;
        disabled?: boolean | undefined;
    } & {
        documents?: ({
            type?: LegalDocument_Type | undefined;
            webUrl?: string | undefined;
            version?: string | undefined;
            timestamp?: Date | undefined;
        }[] & ({
            type?: LegalDocument_Type | undefined;
            webUrl?: string | undefined;
            version?: string | undefined;
            timestamp?: Date | undefined;
        } & {
            type?: LegalDocument_Type | undefined;
            webUrl?: string | undefined;
            version?: string | undefined;
            timestamp?: Date | undefined;
        } & Record<Exclude<keyof I["documents"][number], keyof LegalDocument>, never>)[] & Record<Exclude<keyof I["documents"], keyof {
            type?: LegalDocument_Type | undefined;
            webUrl?: string | undefined;
            version?: string | undefined;
            timestamp?: Date | undefined;
        }[]>, never>) | undefined;
        disabled?: boolean | undefined;
    } & Record<Exclude<keyof I, keyof LegalPrompt>, never>>(object: I): LegalPrompt;
};
export declare const LegalDocument: {
    encode(message: LegalDocument, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): LegalDocument;
    fromPartial<I extends {
        type?: LegalDocument_Type | undefined;
        webUrl?: string | undefined;
        version?: string | undefined;
        timestamp?: Date | undefined;
    } & {
        type?: LegalDocument_Type | undefined;
        webUrl?: string | undefined;
        version?: string | undefined;
        timestamp?: Date | undefined;
    } & Record<Exclude<keyof I, keyof LegalDocument>, never>>(object: I): LegalDocument;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {
    $case: string;
} ? {
    [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]>;
} & {
    $case: T["$case"];
} : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & Record<Exclude<keyof I, KeysOfUnion<P>>, never>;
export {};
//# sourceMappingURL=legal_prompt.d.ts.map